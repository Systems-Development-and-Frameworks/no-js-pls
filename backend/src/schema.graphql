type Post {
    id: ID!
    title: String!
    votes: Int!
    author: User!
}

type User {
    id: ID!,
    name: String!,
    email: String!,
    password: String!,
    posts: [Post]
}

type Query {
    """Fetches all available posts"""
    posts: [Post]
    """Fetches all available users"""
    users: [User]
}

type Mutation {
    """Post a new Newspost"""
    write(post: PostInput!): Post
    # OPTIONAL
    # delete(id: ID!): Post

    upvote(id: ID!): Post

    # OPTIONAL
    # downvote(id: ID!): Post
    # OPTIONAL
    # delete(id: ID!): Post

    """
    returns a signed JWT or null
    """
    login(email: String!, password: String!): String

    """
    returns a signed JWT or null
    """
    signup(name: String!, email: String!, password: String!): String
}

input PostInput {
    title: String!
}
